@page "/login"
@using DomainModels
@inject Blazor.Services.APIService Api
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavManager
@inject Blazor.Services.TokenStorage Storage
@inject AuthenticationStateProvider AuthProvider
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Authorization

<h3>Login</h3>

<EditForm Model="model" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="auth-card">
        <div class="mb-3">
            <label>Email</label>
            <InputText class="form-control" @bind-Value="model.Email" />
        </div>

        <div class="mb-3">
            <label>Password</label>
            <InputText class="form-control" type="password" @bind-Value="model.Password" />
        </div>

        @if (!string.IsNullOrWhiteSpace(Error))
        {
            <div class="alert alert-danger">@Error</div>
        }

        <p class="muted">@Message</p>

        <button class="btn btn-primary" disabled="@Loading">Log ind</button>
    </div>
</EditForm>

@code {
    private LoginForm model = new();
    private bool Loading;
    private string? Error;
    private string Message = "";

    private sealed class LoginForm
    {
        public string Email { get; set; } = "";
        public string Password { get; set; } = "";
    }

    private async Task HandleLogin()
    {
        Error = null;
        Message = "";
        Loading = true;

        try
        {
            var res = await Api.LoginAsync(new LoginDto
                {
                    Email = model.Email?.Trim(),
                    Password = model.Password
                });

            if (!res.IsSuccessStatusCode)
            {
                Dictionary<string, string?>? err = null;
                try { err = await res.Content.ReadFromJsonAsync<Dictionary<string, string?>>(); } catch { }
                Error = (err != null && err.TryGetValue("message", out var m) && !string.IsNullOrWhiteSpace(m))
                    ? $"Login failed: {m}"
                    : "Login failed: forkert kode eller email";
                return;
            }

            var loginRes = await res.Content.ReadFromJsonAsync<LoginResponseDto>();
            if (loginRes is null || string.IsNullOrWhiteSpace(loginRes.Token))
            {
                var raw = await res.Content.ReadAsStringAsync();
                Error = $"Login failed: no token returned (body: {raw})";
                return;
            }

            await LocalStorage.SetItemAsync("authToken", loginRes.Token);
            await Storage.SetTokenAsync(loginRes.Token);
            Api.SetBearer(loginRes.Token);

            if (AuthProvider is Blazor.Services.AuthStateProvider custom)
                await custom.MarkUserAsAuthenticatedAsync(loginRes.Token);

            Message = "Login successful";
            NavManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            Error = "Login error: " + ex.Message;
        }
        finally
        {
            Loading = false;
        }
    }
}
