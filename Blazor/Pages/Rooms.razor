@page "/rooms"
@inject Blazor.Services.APIService Api
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavManager

<h1>Available Rooms</h1>

@if (loading)
{
    <p>Loading rooms…</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <p class="error">@error</p>
}
else
{
    <div class="rooms-grid">
        @foreach (var room in rooms!)
        {
            <div class="room-card @(room.IsAvailable ? "" : "unavailable")">
                <h3>Room @room.RoomNumber (@room.Type)</h3>
                <p>@(room.IsAvailable ? "Available" : "Booked")</p>

                @if (room.IsAvailable)
                {
                    <button @onclick="() => TryBook(room.Id)">Book</button>
                }
                else
                {
                    <button disabled>Unavailable</button>
                }
            </div>
        }
    </div>
}

@code {
    private List<DomainModels.RoomDto>? rooms;
    private bool loading = true;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        await LoadRoomsAsync();
    }

    private async Task LoadRoomsAsync()
    {
        loading = true;
        error = null;
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (!string.IsNullOrWhiteSpace(token)) Api.SetBearer(token);

            rooms = await Api.GetRoomsAsync();
        }
        catch (Exception ex)
        {
            error = "Could not load rooms: " + ex.Message;
            rooms = new List<DomainModels.RoomDto>();
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }

    async Task TryBook(int roomId)
    {
        try
        {
            var token = await LocalStorage.GetItemAsync<string>("authToken");
            if (string.IsNullOrEmpty(token))
            {
                NavManager.NavigateTo("/login");
                return;
            }

            Api.SetBearer(token);


            var localNow = DateTimeOffset.Now;
            var checkIn = new DateTimeOffset(localNow.Year, localNow.Month, localNow.Day, 0, 0, 0, localNow.Offset);
            var checkOut = checkIn.AddDays(1);

            var dto = new DomainModels.BookingDto
                {
                    RoomId = roomId,
                    CheckIn = checkIn,
                    CheckOut = checkOut
                };

            var res = await Api.CreateBookingAsync(dto);
            if (res.IsSuccessStatusCode)
            {
                rooms = await Api.GetRoomsAsync(checkIn.ToUniversalTime(), checkOut.ToUniversalTime());
            }
            else
            {
                var txt = await res.Content.ReadAsStringAsync();
                error = "Booking failed: " + txt;
            }
        }
        catch (Exception ex)
        {
            error = "Booking error: " + ex.Message;
        }
    }
}
